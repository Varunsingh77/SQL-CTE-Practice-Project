CREATE DATABASE cte;
USE cte;

-- Create tables
CREATE TABLE products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(50),
    category VARCHAR(30),
    cost_price DECIMAL(10,2)
);

CREATE TABLE stores (
    store_id INT PRIMARY KEY,
    store_name VARCHAR(50),
    city VARCHAR(30),
    manager_name VARCHAR(30)
);

CREATE TABLE sales_data (
    sale_id INT PRIMARY KEY,
    sale_date DATE,
    store_id INT,
    product_id INT,
    quantity INT,
    unit_price DECIMAL(10,2),
    payment_method VARCHAR(20),
    region VARCHAR(20),
    FOREIGN KEY (store_id) REFERENCES stores(store_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);

-- Insert into products
INSERT INTO products VALUES
(501, 'T-shirt', 'Apparel', 80),
(502, 'Jeans', 'Apparel', 120),
(503, 'Sneakers', 'Footwear', 100),
(504, 'Watch', 'Accessories', 150),
(505, 'Jacket', 'Apparel', 200);

-- Insert into stores
INSERT INTO stores VALUES
(101, 'North Mart', 'Delhi', 'Rakesh'),
(102, 'East Bazaar', 'Kolkata', 'Priya'),
(103, 'West Trendz', 'Mumbai', 'Arjun'),
(104, 'South Hub', 'Chennai', 'Sneha');

-- Insert into sales_data
INSERT INTO sales_data VALUES
(1, '2025-01-02', 101, 501, 5, 120, 'UPI', 'North'),
(2, '2025-01-02', 102, 503, 3, 150, 'Cash', 'East'),
(3, '2025-01-03', 101, 504, 8, 200, 'Card', 'North'),
(4, '2025-01-03', 103, 502, 2, 180, 'UPI', 'West'),
(5, '2025-01-04', 102, 501, 1, 120, 'Card', 'East'),
(6, '2025-01-04', 103, 505, 4, 300, 'UPI', 'West'),
(7, '2025-01-05', 101, 503, 6, 150, 'UPI', 'North'),
(8, '2025-01-06', 104, 504, 10, 200, 'Cash', 'South'),
(9, '2025-01-07', 104, 505, 3, 300, 'Card', 'South'),
(10, '2025-01-07', 103, 502, 5, 180, 'UPI', 'West');


-- Write a CTE to calculate the total sales amount per sale and display all sales with total amount greater than ₹1000.

WITH sales_amount AS (
	SELECT sale_id,
		   SUM(unit_price * quantity) AS total_amount
		FROM sales_data
        GROUP BY sale_id
)
SELECT *
	FROM sales_amount
WHERE total_amount > 1000;

-- Use a CTE to find the total revenue generated by each store. Then select only those stores whose total revenue exceeds ₹3000.

WITH store_revenue AS(
	SELECT
		store_id,
        SUM(unit_price * quantity) AS total_revenue
		FROM sales_data
        GROUP BY store_id
)
SELECT *
	FROM store_revenue
    WHERE total_revenue > 3000;

-- Create a CTE to calculate total quantity sold per product.
-- Then join it with the products table to show the product name and total quantity sold.

WITH productsold AS (
	SELECT product_id,
    SUM(quantity) AS Total_quantity
    FROM sales_data
    GROUP BY product_id
)
SELECT 
	p.product_name,
    ps.Total_quantity
FROM productsold ps
JOIN products p
	ON ps.product_id = p.product_id;

-- Write a CTE that calculates revenue by payment method (UPI, Cash, Card).
-- Then from the CTE, find which payment method generated the highest revenue.

WITH payment_method AS (
	SELECT
		payment_method,
        SUM(unit_price * quantity) AS revenue
	FROM sales_data
    GROUP BY payment_method
)
SELECT * 
	FROM payment_method
	ORDER BY revenue DESC;

-- Use a CTE to calculate total sales per region.
-- Then in the main query, show each region with its total sales and
-- rank the regions by sales (use RANK() or DENSE_RANK()).

WITH region_sales AS (
		SELECT 
        region,
        SUM(unit_price * quantity ) AS total_sales
        FROM sales_data
        GROUP BY region
)
SELECT 
	region,
    total_sales,
    RANK() OVER(ORDER BY total_sales DESC) AS region_rank
FROM region_sales;	
    
-- Use a CTE to get the total revenue and total quantity sold per store.
-- Then in the main query, use a CASE statement to categorize stores as:
-- 'High Performing' if revenue > 5000
-- 'Average' if between 3000 and 5000
-- 'Low Performing' otherwise

WITH store_performance AS (
	SELECT
		store_id,
		SUM(unit_price * quantity) AS sales,
        SUM(quantity) AS quantity
        FROM sales_data
        GROUP BY store_id
)
SELECT 
	store_id,
    quantity,
    sales,
CASE
	WHEN sales > 5000 THEN 'High Performance'
    WHEN sales BETWEEN 3000 AND 5000 THEN 'Average Performance'
    ELSE 'Low Performance'
END AS Performance_category
 FROM store_performance;

-- Using a CTE, calculate daily total revenue.
-- Then in the main query, show the day with the maximum revenue.

WITH daily_total AS (
    SELECT 
        sale_date,
        SUM(unit_price * quantity) AS total_sales
    FROM sales_data
    GROUP BY sale_date
)
SELECT 
    DATE_FORMAT(sale_date, '%W') AS day_name,
    total_sales
FROM daily_total
ORDER BY total_sales DESC
LIMIT 1;

-- Create a two-level CTE:
-- First CTE: Calculate total sales per store
-- Second CTE: Calculate the average store revenue
-- Finally, return all stores whose revenue is above the average.

WITH store_performance AS (
	SELECT 
		store_id,
        SUM(unit_price * quantity) AS total_sales
        FROM sales_data
        GROUP BY store_id
),
Avg_sales AS (
		SELECT
		AVG(total_sales) As Avg_revenue
		FROM store_performance
)
SELECT
  sp.store_id,
  sre.store_name,
  sp.total_sales,
  ar.Avg_revenue
FROM store_performance sp
JOIN Avg_sales ar
	ON sp.total_sales > ar.Avg_revenue
JOIN stores sre
	ON sp.store_id = sre.store_id;






